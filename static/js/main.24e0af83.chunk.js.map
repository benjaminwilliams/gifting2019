{"version":3,"sources":["generate.ts","App.tsx","serviceWorker.js","index.js"],"names":["generate","people","removeCurrentPerson","person","allPeople","slice","personPosition","findIndex","p","splice","calculateMatch","Math","floor","random","length","list1","list2","output","matches","isValid","calculateMatches","codedMatch","btoa","encode","push","match","App","matched","className","map","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAsEeA,MArEf,SAAkBC,GAEhB,SAASC,EAAqBC,EAAgBF,GAC5C,IAAMG,EAAYH,EAAOI,MAAM,GACzBC,EAAiBF,EAAUG,WAAU,SAAAC,GAAC,OAAIA,IAAML,KAItD,OAHGG,GAAkB,GACnBF,EAAUK,OAAOH,EAAgB,GAE5BF,EAGT,SAASM,EAAgBT,GAEvB,OAAOA,EADgBU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAOa,SAsD3D,OAnBA,SAAgBb,GACd,IAAMc,EAAuBd,EAAOI,MAAM,GACpCW,EAAuBf,EAAOI,MAAM,GACpCY,EAAwB,GAHO,uBAIrC,IAJqC,IAIrC,EAJqC,iBAI1Bd,EAJ0B,QAO7Be,EAtCV,SAA2BH,EAAsBC,GAO/C,IAAIE,EAAU,GACVC,GAAU,EACd,IAEED,EAPO,CAFQR,EAAeK,GACfL,EAAeM,KASnB,KAAOE,EAAQ,GACxBC,GAAU,EAEc,IAAjBJ,EAAMD,QAAiC,IAAjBE,EAAMF,SACnCI,EAAQ,GAAK,UACbA,EAAQ,GAAK,UACbC,GAAU,UAGNA,GAER,OAAOD,EAe0BE,CAFhBlB,EAAoBC,EAAQY,GAC5Bb,EAAoBC,EAAQa,IAE3CD,EAAMN,OAAOM,EAAMR,WAAU,SAAAC,GAAC,OAAIA,IAAMU,EAAQ,MAAK,GACrDF,EAAMP,OAAOO,EAAMT,WAAU,SAAAC,GAAC,OAAIA,IAAMU,EAAQ,MAAK,GAGrD,IAAMG,EAjBV,SAAiBlB,GAEf,OAAOmB,KAAKnB,GAeSoB,CAAO,GAAD,OAAIL,EAAQ,GAAZ,gBAAsBA,EAAQ,KACvDD,EAAOO,KAAP,UAAerB,EAAf,iBAA8BkB,KAThC,EAAqBpB,EAArB,+CAA6B,IAJQ,kFAgBrC,OAAOgB,EAGFQ,CAAMxB,ICrCAyB,MAzBf,WACE,IAUMC,EAAyB3B,EAVhB,CACb,aACA,aACA,aACA,aACA,aACA,aACA,aACA,eAIF,OACE,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,cAClB,4BACKD,EAAQE,KAAI,SAAAJ,GAAK,OAAI,4BAAKA,UCVjBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24e0af83.chunk.js","sourcesContent":["\r\nfunction generate(people: Array<string>){\r\n\r\n  function removeCurrentPerson (person: string, people: Array<string>): Array<string> {\r\n    const allPeople = people.slice(0) //shallow copy\r\n    const personPosition = allPeople.findIndex(p => p === person)\r\n    if(personPosition >= 0){\r\n      allPeople.splice(personPosition, 1) \r\n    }\r\n    return allPeople\r\n  }\r\n\r\n  function calculateMatch (people: Array<string>): string {\r\n    const randomPosition = Math.floor(Math.random() * people.length)\r\n    return people[randomPosition]\r\n  }\r\n\r\n  function calculateMatches (list1: Array<string>, list2: Array<string>): Array<string> {\r\n    function calcMatches(): Array<string> {\r\n      const match1 = calculateMatch(list1)\r\n      const match2 = calculateMatch(list2)\r\n      return [match1, match2]\r\n    }\r\n\r\n    let matches = []\r\n    let isValid = false\r\n    do {\r\n      \r\n      matches = calcMatches()\r\n      if(matches[0] !== matches[1]){\r\n        isValid = true\r\n      }\r\n      else if( list1.length === 1 || list2.length === 1) {\r\n        matches[0] = \"invalid\"\r\n        matches[1] = \"invalid\"\r\n        isValid = true\r\n      }\r\n    }\r\n    while (!isValid)\r\n \r\n    return matches\r\n  }\r\n  \r\n  function encode (person: string): string {\r\n    // return person\r\n    return btoa(person)\r\n  }\r\n\r\n  function match (people: Array<string>) {\r\n    const list1: Array<string> = people.slice(0)\r\n    const list2: Array<string> = people.slice(0)\r\n    const output: Array<string> = []\r\n    for (const person of people){\r\n      const group1 = removeCurrentPerson(person, list1)\r\n      const group2 = removeCurrentPerson(person, list2)\r\n      const matches: Array<string> = calculateMatches(group1, group2)\r\n      list1.splice(list1.findIndex(p => p === matches[0]), 1)\r\n      list2.splice(list2.findIndex(p => p === matches[1]), 1)\r\n      \r\n      //peopleMinusPerson.splice(persons.findIndex(el => el === match), 1) // remove match from list of candidates\r\n      const codedMatch = encode(`${matches[0]} and ${matches[1]}`)\r\n      output.push(`${person} gets ${codedMatch}`)\r\n      \r\n    }\r\n    return output\r\n  }\r\n  \r\n  return match(people)\r\n}\r\n\r\nexport default generate\r\n\r\n\r\n  \r\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport generate from './generate';\n\nfunction App() {\n  const people = [\n    \"Benjamin  \",\n    \"Douglas   \",\n    \"Lauretta  \",\n    \"Annie     \",\n    \"Kathryn   \",\n    \"Michael   \",\n    \"Steven    \",\n    \"Leah      \"\n  ]\n  const matched: Array<string> = generate(people)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <ul>          \n          {matched.map(match => <li>{match}</li>)}\n        </ul>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}